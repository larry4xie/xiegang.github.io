<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lxie&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lxie.xyz/"/>
  <updated>2016-05-16T08:53:55.000Z</updated>
  <id>http://lxie.xyz/</id>
  
  <author>
    <name>lxie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quorum NRW</title>
    <link href="http://lxie.xyz/2016/05/16/quorum-nrw/"/>
    <id>http://lxie.xyz/2016/05/16/quorum-nrw/</id>
    <published>2016-05-16T08:46:52.000Z</published>
    <updated>2016-05-16T08:53:55.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Quorum([‘kwɔ:rəm])字面意思是选举法定人数，在西方资本主义社会在举行选举时，通常要求参与人数必须达到额定的数量，才能成为一个法定有效的选举，这个额定的人数就是Quorum&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quorum机制是一种&lt;strong&gt;容错技术&lt;/strong&gt;，是一种分布式系统中常用的用来保证数据冗余和最终一致性的投票算法，其主要数学思想来源于鸽笼原理&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;鸽笼原理很简单：若有n+1只鸽子关在n个笼子里，那么至少有一个笼子有至少2只鸽子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Quorum-NRW机制&quot;&gt;&lt;a href=&quot;#Quorum-NRW机制&quot; class=&quot;headerlink&quot; title=&quot;Quorum NRW机制&quot;&gt;&lt;/a&gt;Quorum NRW机制&lt;/h2&gt;&lt;p&gt;分布式系统通常支持多副本，副本存放在不同节点上，读写时需要对多个副本进行操作，Quorum NRW机制如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N表示数据所具有的副本数&lt;/li&gt;
&lt;li&gt;R表示完成读操作所需要读取的最小副本数，即一次读操作所需参与的最小节点数目&lt;/li&gt;
&lt;li&gt;W表示完成写操作所需要写入的最小副本数，即一次写操作所需参与的最小节点数目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如果R + W ≤ N，这时读取和写入操作是不重叠的；只需要保证R + W &amp;gt; N，就可以保证强一致性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;quorum由多个节点构成（一般是3个，AWS Dynamo默认就是3个），quorum内节点之间通过互相通信和数据复制等方式来保持数据操作的一致性。同时，各个quorum之间又通过相交节点来把各自quorum内部的数据复制到其它quorum的所有节点&lt;/p&gt;
&lt;p&gt;各种quorum系统容错技术的主要区别在于组织方式、拓扑结构、执行协议的不同，以及由此带来的&lt;strong&gt;性能&lt;/strong&gt;和&lt;strong&gt;应用领域&lt;/strong&gt;的差异&lt;/p&gt;
&lt;h2 id=&quot;容错协议&quot;&gt;&lt;a href=&quot;#容错协议&quot; class=&quot;headerlink&quot; title=&quot;容错协议&quot;&gt;&lt;/a&gt;容错协议&lt;/h2&gt;&lt;h3 id=&quot;选举&quot;&gt;&lt;a href=&quot;#选举&quot; class=&quot;headerlink&quot; title=&quot;选举&quot;&gt;&lt;/a&gt;选举&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;选举协议允许写quorum中节点含有数据不同和读quorum中节点含有数据丢失或者不一致的错误或者故障，但是只要当前quorum有效节点所包含正确数据信息足够多，客户端任然能从quorum的返回数据中获取有效数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;客户端根据返回数据的时间戳来将最新时间戳的数据作为可靠数据选择样本，当所有返回数据值相等且超过quorum规模的一半，就认为数据有效，否则认为数据无效&lt;/p&gt;
&lt;p&gt;如果整个系统都没有有效读quorum，则系统失效&lt;/p&gt;
&lt;h3 id=&quot;互斥&quot;&gt;&lt;a href=&quot;#互斥&quot; class=&quot;headerlink&quot; title=&quot;互斥&quot;&gt;&lt;/a&gt;互斥&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;互斥协议从不含故障或者错误节点的有效quorum的节点中获得有效数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读操作：从其它有效quorum中获取有效数据，如果整个系统都没有有效读quorum，则系统失效&lt;/p&gt;
&lt;p&gt;写操作：如果对同一数据进行写操作，则时间戳早或者优先权高的优先操作；如果对不同数据进行写操作且数据之间存在同步关系，则时间戳早或者优先权高的优先操作，否则如果无同步关系，则先到者先操作&lt;/p&gt;
&lt;h2 id=&quot;系统特征&quot;&gt;&lt;a href=&quot;#系统特征&quot; class=&quot;headerlink&quot; title=&quot;系统特征&quot;&gt;&lt;/a&gt;系统特征&lt;/h2&gt;&lt;p&gt;很多特征都是双刃剑，如何权衡是一种艺术，需要结合具体的场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;规模（size）&lt;br&gt;数量越大则节点间通信成本越高，同步时长越长；反之，数量越小则冗余量越小，含有有效数据的节点比例也越低；规模是把双刃剑，如何选择是种艺术，一般选择3个节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可用性（availability）&lt;br&gt;可用性即节点出错时系统仍能可靠运行的概率，该值越大则系统可用性越高，容错性能也越好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最大失效节点个数&lt;br&gt;系统在满足可用性的前提下所能容忍失效节点的最大数量，值比例越大则容错性越好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;负载（load）&lt;br&gt;系统中&lt;code&gt;最小quorum&lt;/code&gt;的&lt;code&gt;最忙节点&lt;/code&gt;的&lt;code&gt;最小访问概率&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;quorum越小则其内部节点参与quorum之间相交的概率越大&lt;/li&gt;
&lt;li&gt;最小quorum中参与quorum之间相交最多的节点即为最忙节点&lt;/li&gt;
&lt;li&gt;节点被访问的最小概率可作为整个系统所有节点被访问的最小概率上限，该值越大则利用率越高，同时也要求最忙节点的可靠性也就越高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读容量（read-capability）&lt;br&gt;系统最大可并行进行读操作且不相交读quorum的个数；在系统总节点数固定的情况下，读容量越大则系统提供并行数据服务的能力越高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特殊用例&quot;&gt;&lt;a href=&quot;#特殊用例&quot; class=&quot;headerlink&quot; title=&quot;特殊用例&quot;&gt;&lt;/a&gt;特殊用例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;当W = 1，R = N时，系统对写操作有较高的要求，但读操作会比较慢，若N个节点中有节点发生故障，那么读操作将不能完成&lt;/li&gt;
&lt;li&gt;当R = 1，W = N时，系统要求读操作高性能、高可用，但写操作性能较低，用于需要大量读操作的系统，若N个节点中有节点发生故障，那么写操作将无法完成&lt;/li&gt;
&lt;li&gt;当R = Q，W = Q，Q = N / 2 + 1时，系统在读写性能之间取得了平衡，兼顾了性能和可用性，AWS Dynamo系统的默认设置就是这种，即N=3，W=2，R=2&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Quorum([‘kwɔ:rəm])字面意思是选举法定人数，在西方资本主义社会在举行选举时，通常要求参与人数必须达到额定的数量，才能成为一个法定有效的选举，这个额定的人数就是Quorum&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quorum机制是一种&lt;strong&gt;容错技术&lt;/strong&gt;，是一种分布式系统中常用的用来保证数据冗余和最终一致性的投票算法，其主要数学思想来源于鸽笼原理&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://lxie.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://lxie.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="quorum" scheme="http://lxie.xyz/tags/quorum/"/>
    
      <category term="最终一致性" scheme="http://lxie.xyz/tags/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
</feed>
